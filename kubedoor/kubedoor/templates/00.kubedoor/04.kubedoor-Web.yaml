{{- if .Values.kubedoor.web.enable }}
apiVersion: v1
kind: Secret
metadata:
  name: nginx-auth
  namespace: kubedoor
data:
  user.passwd: {{ .Values.kubedoor_web_secret.nginx_auth | join "\n" | b64enc | quote }}
type: Opaque

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: kubedoor
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        map "$time_iso8601 # $msec" $time_iso8601_ms { "~(^[^+]+)(\+[0-9:]+) # \d+\.(\d+)$" $1.$3$2; }
        log_format main
            '{"timestamp":"$time_iso8601_ms",'
            '"server_ip":"$server_addr",'
            '"remote_ip":"$remote_addr",'
            '"xff":"$http_x_forwarded_for",'
            '"remote_user":"$remote_user",'
            '"domain":"$host",'
            '"url":"$request_uri",'
            '"referer":"$http_referer",'
            '"upstreamtime":"$upstream_response_time",'
            '"responsetime":"$request_time",'
            '"request_method":"$request_method",'
            '"status":"$status",'
            '"response_length":"$bytes_sent",'
            '"request_length":"$request_length",'
            '"protocol":"$server_protocol",'
            '"upstreamhost":"$upstream_addr",'
            '"http_user_agent":"$http_user_agent",'
            '"【body】": "$request_body"'
            '}';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  7200;

        #gzip  on;

        #ldap_server openldap {
        #    url ldap://xxxxx.casstime.com:389/cn=accounts,dc=o,dc=casstime,dc=com?uid?sub?(objectClass=person);
        #    binddn "uid=keycloakbot,cn=users,cn=accounts,dc=o,dc=casstime,dc=com";
        #    binddn_passwd "xxxxxxx";
        #    group_attribute uniquemember;
        #    group_attribute_is_dn on;
        #    require valid_user;
        #}


        include /etc/nginx/conf.d/*.conf;
    }

  default.conf: |
    map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
    }

    map $remote_user $user_permission {
        default   "read";
        ~*^kubedoor$ "rw";
        Up4biLko1dNh "rw"; #agent连接master用户
    }

    auth_basic "KubeDoor Login";
    auth_basic_user_file  /etc/nginx/user.passwd;

    server {
        listen 80;
        location / {
            #auth_ldap "KubeDoor LDAP";
            #auth_ldap_servers openldap;
            root  /www/dist;
        }

        location /grafana/ {
            proxy_set_header Host $host;
            proxy_pass  http://kubedoor-dash.kubedoor:3000;
        }

        location /grafana/api/live/ {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_pass  http://kubedoor-dash.kubedoor:3000;
        }

        location /ws {
            if ($user_permission = "read") {
                return 403;
            }
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_pass  http://kubedoor-master.kubedoor;
        }

        location ~ ^/api/prom_.* {
            proxy_read_timeout 300;
            proxy_pass  http://kubedoor-master.kubedoor;
        }  

        location /api/sql {
            proxy_read_timeout 300;
            proxy_pass  http://kubedoor-master.kubedoor;
        }        

        location /api/ {
            if ($user_permission = "read") {
                return 403;
            }
            proxy_read_timeout 600;
            proxy_pass  http://kubedoor-master.kubedoor;
        }
    }

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubedoor-web
  namespace: kubedoor
  labels:
    app: kubedoor-web
    app.kubernetes.io/instance: kubedoor-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubedoor-web
  template:
    metadata:
      labels:
        app: kubedoor-web
    spec:
      volumes:
        - name: nginx-auth
          secret:
            secretName: nginx-auth
        - name: nginx-config
          configMap:
            name: nginx-config
      containers:
        - name: kubedoor-web
          image: {{ .Values.image.repository }}/kubedoor-web:{{ .Values.image.kubedoor_web_tag }}
          envFrom:
            - configMapRef:
                name: kubedoor-config
          env:
            - name: TZ
              value: Asia/Shanghai
          resources:
            limits:
              cpu: '1'
              memory: 1Gi
            requests:
              cpu: 1m
              memory: 1Mi
          volumeMounts:
            - name: nginx-auth
              mountPath: /etc/nginx/user.passwd
              subPath: user.passwd
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
          livenessProbe:
            tcpSocket:
              port: 80
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 80
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          imagePullPolicy: Always
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: kubedoor-web
  namespace: kubedoor
  labels:
    app: kubedoor-web
    app.kubernetes.io/instance: kubedoor-web
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
  selector:
    app: kubedoor-web
  type: NodePort
  externalTrafficPolicy: Cluster
{{- end }}
